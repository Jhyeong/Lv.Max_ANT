{"version":3,"sources":["components/SideMenu/SideMenuHeader.js","components/SideMenu/SideMenuRow.js","components/SideMenu/SideMenuBody.js","components/SideMenu/SideMenu.js","components/ContentWrapper/ContentWrapper.js","services/RESTAPI.js","components/Content/Content.js","components/ContentTable/ContentTable.js","components/TransitionsModal/TransitionsModal.js","App.js","serviceWorker.js","index.js"],"names":["SideMenuHeader","to","className","src","SideMenuRow","props","state","title","this","path","selectedId","id","onClick","onClickHandler","Component","SideMenuBody","handleItemClick","bind","e","setState","target","SideMenu","ContentWrapper","exact","render","isSearch","isEditable","getSearchedStockItems","param","axios","get","params","getTradeResultSummary","getTradeResultDetail","getCommonCode","Content","initData","a","window","location","pathname","startDate","endDate","result","service","data","dateUtil","DateFnsUtils","format","addDays","Date","isReload","date","post","response","alert","put","currentMenu","delete","utils","margin","label","value","onChange","handleStartDateChange","KeyboardButtonProps","disableToolbar","variant","handleEndDateChange","Button","color","startIcon","onClickSearch","rowData","insertHandler","updateHandler","deleteHandler","insertMode","editMode","deleteMode","ContentTable","headers","columns","columnType","selectedEditRowIdx","currentInsertData","currentUpdateData","currentTarget","confirm","fieldName","name","length","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","map","TableCell","TableBody","onClickInsertSave","onClickInsert","rowIdx","column","idx","IconButton","onClickUpdateSave","onClickCancel","onClickUpdate","onClickDelete","TextField","disabled","defaultValue","onEditChangeHandler","indexOf","displayType","thousandSeparator","suffix","classValue","parseFloat","href","onInsertChangeHandler","App","Boolean","hostname","match","ReactDOM","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d5518ed.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SideMenuHeader.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SideMenuHeader = () => (\r\n    <Link to=\"/\">\r\n        <div className=\"SideMenuHeader\">\r\n            <div className=\"logoWrapper\">\r\n                <img src=\"styles/images/logo.png\" className=\"logo\"/>\r\n                <div>만렙개미</div>\r\n            </div>\r\n        </div>\r\n    </Link>\r\n)\r\n\r\n\r\nexport default SideMenuHeader;","import React, {Component} from 'react';\r\nimport './SideMenuRow.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * 메뉴 row\r\n */\r\nclass SideMenuRow extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            title : [\"조건검색 조회\", \"체결결과 요약\", \"체결결과 상세\", \"공통코드 관리\"]\r\n        };\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <Link to={this.props.path}>\r\n                <div className={this.props.selectedId == this.props.id? \"active item\" : \"item\"}\r\n                    onClick={this.props.onClickHandler}\r\n                    id={this.props.id}>\r\n                    {this.state.title[this.props.id]}\r\n                </div>\r\n            </Link>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SideMenuRow;","import React, { Component } from 'react';\r\nimport './SideMenuBody.css';\r\nimport SideMenuRow from './SideMenuRow';\r\n\r\n\r\nclass SideMenuBody extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.handleItemClick = this.handleItemClick.bind(this);\r\n        this.state = {\r\n            selectedId : 0\r\n        }\r\n    }\r\n\r\n    //클릭한 메뉴 활성화\r\n    handleItemClick(e){\r\n        this.setState({\r\n            selectedId : e.target.id\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"SideMenuBody\">\r\n                <SideMenuRow path=\"/searched-stock-items\"   id=\"0\" selectedId={this.state.selectedId} onClickHandler={this.handleItemClick}></SideMenuRow>\r\n                <SideMenuRow path=\"/trade-result-summary\"   id=\"1\" selectedId={this.state.selectedId} onClickHandler={this.handleItemClick}></SideMenuRow>\r\n                <SideMenuRow path=\"/trade-result-detail\"    id=\"2\" selectedId={this.state.selectedId} onClickHandler={this.handleItemClick}></SideMenuRow>\r\n                <SideMenuRow path=\"/common-code\"            id=\"3\" selectedId={this.state.selectedId} onClickHandler={this.handleItemClick}></SideMenuRow>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SideMenuBody;","import React from 'react';\r\nimport SideMenuHeader from './SideMenuHeader'\r\nimport SideMenuBody from './SideMenuBody'\r\nimport './SideMenu.css';\r\n\r\nconst SideMenu = () => (\r\n    <div className=\"SideMenu\">\r\n        <SideMenuHeader></SideMenuHeader>\r\n        <SideMenuBody></SideMenuBody>\r\n    </div>\r\n)\r\n\r\n\r\nexport default SideMenu;","import React, {Component} from 'react';\r\nimport {Content} from '../';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './ContentWrapper.css';\r\n\r\nclass ContentWrapper extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"ContentWrapper\">\r\n                <Route exact path=\"/\"/>\r\n                <Route exact path=\"/searched-stock-items\"     render={()=> <Content title = \"조건검색 조회\" isSearch={true} isEditable={false}/>}/>\r\n                <Route exact path=\"/trade-result-summary\"     render={()=> <Content title = \"체결결과 요약\" isSearch={true} isEditable={false}/>}/>\r\n                <Route exact path=\"/trade-result-detail\"      render={()=> <Content title = \"체결결과 상세\" isSearch={true} isEditable={false}/>}/>\r\n                <Route exact path=\"/common-code\"              render={()=> <Content title = \"공통코드 관리\" isSearch={false} isEditable={true}/>}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ContentWrapper;","import axios from 'axios';\r\n/**\r\n * REST API 호출 js\r\n */\r\n// 조건검색 결과\r\nexport function getSearchedStockItems(param){\r\n    return axios.get(\"/searched-stock-items\", {\r\n        params : param\r\n    });\r\n}\r\n\r\n// 체결내역 요약\r\nexport function getTradeResultSummary(param){\r\n    return axios.get(\"/trade-result-summary\",{\r\n        params : param\r\n    });\r\n}\r\n\r\n// 체결내역 상세\r\nexport function getTradeResultDetail(param){\r\n    return axios.get(\"/trade-result-detail\",{\r\n        params : param\r\n    });\r\n}\r\n\r\n// 공통코드 관리\r\nexport function getCommonCode(param){\r\n    return axios.get(\"/common-code\",{\r\n        params : param\r\n    });\r\n}\r\n\r\n// 공통코드 업데이트\r\nexport function updateCommonCode(param){\r\n    return axios.put(\"/common-code/\" + param[\"NO\"], param);\r\n}\r\n\r\n// 공통코드 신규 추가\r\nexport function insertCommonCode(param){\r\n    return axios.post(\"/common-code\", param);\r\n}\r\n\r\n// 공통코드 삭제\r\nexport function deleteCommonCode(param){\r\n    return axios.delete(\"/common-code/\" + param[\"NO\"], param);\r\n}\r\n","import React, {Component} from 'react';\r\nimport {ContentTable} from '../';\r\nimport './Content.css';\r\nimport 'date-fns';\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n  } from '@material-ui/pickers';\r\nimport Button from '@material-ui/core/Button';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport * as service from '../../services/RESTAPI';\r\n\r\nclass Content extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        const dateUtil = new DateFnsUtils();\r\n        \r\n        this.state = {\r\n            data : [],\r\n            startDate : dateUtil.format(dateUtil.addDays(new Date(), -7), \"yyyy-MM-dd\"),\r\n            endDate : dateUtil.format(new Date(), \"yyyy-MM-dd\"),\r\n            isReload : false\r\n        }\r\n\r\n        // 초기 조회\r\n        this.initData();\r\n    }\r\n\r\n    // 조회 시작일\r\n    handleStartDateChange(date){\r\n        this.setState({\r\n            startDate : date\r\n        });\r\n    }\r\n\r\n    // 조회 종료일\r\n    handleEndDateChange(date){\r\n        this.setState({\r\n            endDate : date\r\n        });\r\n    }\r\n\r\n    // 조회 버튼 클릭\r\n    onClickSearch(e){\r\n        this.initData();\r\n    }\r\n    \r\n    // REST API 호출\r\n    initData = async () => {\r\n        const path = window.location.pathname;\r\n        const param = {\r\n            startDate : this.state.startDate,\r\n            endDate : this.state.endDate\r\n        };\r\n        let result = [];\r\n        switch(path){\r\n            case \"/searched-stock-items\":\r\n                result = await service.getSearchedStockItems(param);\r\n                break;\r\n            case \"/trade-result-summary\" :\r\n                result = await service.getTradeResultSummary(param);\r\n                break;\r\n            case \"/trade-result-detail\" :\r\n                result = await service.getTradeResultDetail(param);\r\n                break;\r\n            case \"/common-code\" :\r\n                result = await service.getCommonCode(param);\r\n                break;    \r\n            default :\r\n                break;\r\n        }\r\n        \r\n        this.setState({\r\n            data : result.data\r\n        });\r\n    };\r\n    \r\n    // 추가버튼 클릭 시 호출\r\n    async insertHandler(data, e){\r\n        let response;\r\n        const path = window.location.pathname;\r\n        switch(path){\r\n            case \"/common-code\" :\r\n                response = await service.insertCommonCode(data);\r\n                break;    \r\n            default :\r\n                break;\r\n        }\r\n\r\n        if(response.data == 0){\r\n            alert(\"추가 중 에러가 발생했습니다.\");\r\n        }else{\r\n            alert(\"추가가 완료되었습니다.\");\r\n        }\r\n\r\n        this.setState({\r\n            isReload : true\r\n        });\r\n        this.initData();\r\n    }\r\n\r\n    // 수정버튼 클릭 시 호출\r\n    async updateHandler(data, e){\r\n        let response;\r\n        const path = window.location.pathname;\r\n        switch(path){\r\n            case \"/common-code\" :\r\n                response = await service.updateCommonCode(data);\r\n                break;    \r\n            default :\r\n                break;\r\n        }\r\n\r\n        if(response.data == 0){\r\n            alert(\"수정 중 에러가 발생했습니다.\");\r\n        }else{\r\n            alert(\"수정이 완료되었습니다.\");\r\n        }\r\n\r\n        this.setState({\r\n            isReload : true\r\n        });\r\n        this.initData();\r\n    }\r\n\r\n    // 삭제버튼 클릭 시 호출\r\n    async deleteHandler(data, e){\r\n        let response;\r\n        const currentMenu = window.location.pathname;\r\n        switch(currentMenu){\r\n            case \"/common-code\" : \r\n                response = await service.deleteCommonCode(data);\r\n                break;\r\n            default :\r\n                break;\r\n        }\r\n\r\n        if(response.data == 0){\r\n            alert(\"삭제 중 에러가 발생했습니다.\");\r\n        }else{\r\n            alert(\"삭제가 완료되었습니다.\");\r\n        }\r\n\r\n        this.setState({\r\n            isReload : true\r\n        });\r\n        this.initData();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"Content\">\r\n                <div className=\"ContentHeader\">\r\n                    <div>\r\n                        {/* Content 제목 */}\r\n                        {this.props.title}\r\n                    </div>\r\n                    <div className={this.props.isSearch?\"isSearch\":\"isNotSearch\"}>\r\n                        {/* 날짜 조건 */}\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                                format=\"yyyy-MM-dd\"\r\n                                margin=\"normal\"\r\n                                id=\"date-picker-dialog\"\r\n                                label=\"시작일\"\r\n                                value={this.state.startDate}\r\n                                onChange={this.handleStartDateChange.bind(this)}\r\n                                KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                                }}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                        <div className=\"dash\">\r\n                        ~\r\n                        </div>\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                                disableToolbar\r\n                                variant=\"inline\"\r\n                                format=\"yyyy-MM-dd\"\r\n                                margin=\"normal\"\r\n                                id=\"date-picker-dialog\"\r\n                                label=\"종료일\"\r\n                                value={this.state.endDate}\r\n                                onChange={this.handleEndDateChange.bind(this)}\r\n                                KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                                }}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={\"SearchBtn\"}\r\n                            startIcon={<SendIcon>send</SendIcon>}\r\n                            onClick = {this.onClickSearch.bind(this)}\r\n                        >\r\n                            조회\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"ContentBody\">\r\n                    {/* Content 내용 */}\r\n                    <ContentTable \r\n                        rowData = {this.state.data} \r\n                        isEditable={this.props.isEditable}\r\n                        insertHandler={this.insertHandler.bind(this)}\r\n                        updateHandler={this.updateHandler.bind(this)}\r\n                        deleteHandler={this.deleteHandler.bind(this)}\r\n                        insertMode = {false}\r\n                        editMode = {false}\r\n                        deleteMode = {false}\r\n                        isReload = {this.state.isReload}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","import React, { Component } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport './ContentTable.css';\r\nimport NumberFormat from 'react-number-format';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport * as service from '../../services/RESTAPI';\r\n\r\nclass ContentTable extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      headers : {\r\n        \"/searched-stock-items\" : [\"종목코드\", \"종목명\", \"검색일\", \"현재가\", \"전일대비\", \"등락률\"],\r\n        \"/trade-result-detail\"  : [\"종목코드\", \"종목명\", \"체결일자\", \"주문구분\", \"체결수량\", \"체결단가\"],\r\n        \"/trade-result-summary\" : [\"체결일자\", \"총매수금액\", \"총매도금액\", \"총수익\", \"총수익률\", \"총 D+2예수금\"],\r\n        \"/common-code\"          : [\"EDIT\", \"NO\", \"영문코드명\", \"한글코드명\", \"코드 값\", \"설명\"]\r\n      },\r\n      columns : {\r\n        \"/searched-stock-items\"  : [\"STOCK_CODE\", \"STOCK_NAME\", \"SEARCH_DATE\", \"CURRENT_PRICE\", \"COMPARE_YSTDAY\", \"PERCENT\"],\r\n        \"/trade-result-summary\"  : [\"SEARCH_DATE\", \"TOTAL_BUY_PRICE\", \"TOTAL_SELL_PRICE\", \"TOTAL_PROFIT\", \"TOTAL_PERCENT\", \"TOTAL_DEPOSIT\"],\r\n        \"/trade-result-detail\"   : [\"STOCK_CODE\", \"STOCK_NAME\", \"SEARCH_DATE\", \"ORDER_TYPE\", \"TRADE_CNT\", \"TRADE_PRICE\"],\r\n        \"/common-code\"           : [\"EDIT\", \"NO\", \"CODE_NAME_ENG\", \"CODE_NAME_KOR\", \"CODE_VALUE\", \"COMMENT\"]\r\n      },\r\n      columnType : {\r\n        \"number\"  : [\"CURRENT_PRICE\", \"COMPARE_YSTDAY\", \"TOTAL_BUY_PRICE\", \"TOTAL_SELL_PRICE\", \"TOTAL_PROFIT\", \"TOTAL_DEPOSIT\", \"TRADE_PRICE\"],\r\n        \"percent\" : [\"PERCENT\", \"TOTAL_PERCENT\"],\r\n        \"naverLink\" : [\"STOCK_CODE\"]\r\n      },\r\n      insertMode : this.props.insertMode,\r\n      editMode : this.props.editMode,\r\n      deleteMode : this.props.deleteMode,\r\n      selectedEditRowIdx : \"\"\r\n    }\r\n\r\n    //수정한 데이터를 저장할 json객체\r\n    this.currentInsertData = {};\r\n    this.currentUpdateData = {};\r\n  }\r\n\r\n   //수정 버튼 클릭\r\n  onClickUpdate(data, e){\r\n    if(!this.state.editMode){\r\n      //현재 값 셋팅\r\n      this.currentUpdateData = data;\r\n      \r\n      this.setState({\r\n        editMode : true,\r\n        selectedEditRowIdx : e.currentTarget.id\r\n      });\r\n    }\r\n  }\r\n\r\n  //취소 버튼 클릭\r\n  onClickCancel(e){\r\n    if(this.state.editMode == true){\r\n      this.setState({\r\n        editMode : false,\r\n        selectedEditRowIdx : \"\"\r\n      });\r\n    }\r\n    if(this.state.insertMode == true){\r\n      this.setState({\r\n        insertMode : false\r\n      });\r\n    }\r\n  }\r\n\r\n  // 추가 버튼 클릭\r\n  onClickInsert(e){\r\n    this.setState({\r\n      insertMode : true\r\n    });\r\n  }\r\n\r\n  //추가 저장시 호출\r\n  async onClickInsertSave(e){\r\n    await this.props.insertHandler(this.currentInsertData, e);\r\n\r\n    if(this.props.isReload){\r\n      this.setState({\r\n        insertMode : false\r\n      });\r\n    }\r\n  }\r\n\r\n  //수정 저장시 호출\r\n  async onClickUpdateSave(){\r\n    await this.props.updateHandler(this.currentUpdateData);\r\n    \r\n    if(this.props.isReload){\r\n      this.setState({\r\n        editMode : false\r\n      });\r\n    }\r\n  }\r\n\r\n  //삭제 시 호출\r\n  async onClickDelete(data, e){\r\n    if(window.confirm(\"선택한 데이터를 삭제하시겠습니까?\")){\r\n      await this.props.deleteHandler(data, e);\r\n\r\n      if(this.props.isReload){\r\n        this.setState({\r\n          insertMode : false\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  //텍스트 필드 수정 시 호출\r\n  onEditChangeHandler(e){\r\n    const fieldName = e.target.name;\r\n    this.currentUpdateData[fieldName] = e.target.value;\r\n  }\r\n  \r\n  //텍스트 필드 추가 시 호출\r\n  onInsertChangeHandler(e){\r\n    const fieldName = e.target.name;\r\n    this.currentInsertData[fieldName] = e.target.value;\r\n  }\r\n  \r\n  render(){\r\n    // 데이터가 없는 경우\r\n      if(typeof this.props.rowData == \"undefined\" || this.props.rowData.length == 0){\r\n        return(\r\n          <TableContainer component={Paper} className=\"ContentTableContainer\">\r\n              <Table className=\"ContentTable\" aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {this.state.headers[window.location.pathname].map((data) => {\r\n                      return <TableCell>{data}</TableCell>\r\n                    })}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  <TableRow>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n        );\r\n      }else{\r\n        // 데이터가 존재하는 경우\r\n        return(\r\n              <TableContainer component={Paper}>\r\n                <Table className=\"ContentTable\" aria-label=\"simple table\">\r\n                  <caption>\r\n                    {!this.state.insertMode?\r\n                    <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className={\"editBtn\"}\r\n                            startIcon={<AddCircleIcon></AddCircleIcon>}\r\n                            onClick = {this.onClickInsert.bind(this)}\r\n                        >\r\n                            추가\r\n                    </Button>\r\n                    :\r\n                    <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className={\"editBtn\"}\r\n                            startIcon={<SaveIcon></SaveIcon>}\r\n                            onClick = {this.onClickInsertSave.bind(this)}\r\n                        >\r\n                            저장\r\n                    </Button>\r\n                    }\r\n                  </caption>\r\n                  {/* 테이블 헤더 */}\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      {this.state.headers[window.location.pathname].map((data) => {\r\n                        return <TableCell>{data}</TableCell>\r\n                      })}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  {/* 테이블 바디 */}\r\n                  <TableBody>\r\n                      {this.props.rowData.map((data, rowIdx) => {\r\n                        return (\r\n                          <TableRow>\r\n                            {this.state.columns[window.location.pathname].map((column, idx) => {\r\n                              //수정 버튼 필드 추가\r\n                              if(this.props.isEditable && column == \"EDIT\"){\r\n                                if(this.state.editMode == true && rowIdx == this.state.selectedEditRowIdx){\r\n                                  return (\r\n                                    <TableCell>\r\n                                      <IconButton color=\"secondary\" id={rowIdx} name={\"save\"+rowIdx} onClick={() => this.onClickUpdateSave(data)}>\r\n                                        {/* 저장 */}\r\n                                        <SaveIcon/>\r\n                                      </IconButton>\r\n                                      <IconButton color=\"secondary\" id={rowIdx} name={\"cancel\"+rowIdx} onClick={this.onClickCancel.bind(this)}>\r\n                                        {/* 취소 */}\r\n                                        <CancelIcon/>\r\n                                      </IconButton>\r\n                                    </TableCell>\r\n                                  )\r\n                                }else{\r\n                                  return (\r\n                                    <TableCell>\r\n                                      <IconButton color=\"secondary\" id={rowIdx} name={\"edit\"+rowIdx} onClick={this.onClickUpdate.bind(this, data)}>\r\n                                        {/* 수정 */}\r\n                                        <EditIcon/>\r\n                                      </IconButton>\r\n                                      <IconButton color=\"secondary\" id={rowIdx} name={\"delete\"+rowIdx} onClick={this.onClickDelete.bind(this, data)}>\r\n                                        {/* 삭제 */}\r\n                                        <DeleteForeverIcon/>\r\n                                      </IconButton>\r\n                                    </TableCell>\r\n                                  )\r\n                                }\r\n                              ;}\r\n                                \r\n                              //수정 모드일 때 TEXT FIELD 출력\r\n                              if(this.state.editMode == true && rowIdx == this.state.selectedEditRowIdx){\r\n                                // NO컬럼은 disabled\r\n                                if(column == \"NO\"){\r\n                                  return (<TableCell>\r\n                                            <TextField disabled id=\"standard-secondary\" label={column} color=\"secondary\" defaultValue={data[column]}/>\r\n                                        </TableCell>)\r\n                                }else{\r\n                                  return (<TableCell>\r\n                                            <TextField id=\"standard-secondary\" name={column} label={column} color=\"secondary\" defaultValue={data[column]} onChange={this.onEditChangeHandler.bind(this)}/>\r\n                                          </TableCell>)\r\n                                }\r\n                              }else{\r\n                                //수정 모드가 아닐 때 일반 FIELD 출력\r\n                                // 숫자 포맷\r\n                                if(this.state.columnType[\"number\"].indexOf(column) > -1 ){\r\n                                  return <TableCell><NumberFormat value={data[column]} displayType={'text'} thousandSeparator={true} suffix={'원'} /></TableCell>\r\n                                }else if(this.state.columnType[\"percent\"].indexOf(column) > -1 ){\r\n                                  let classValue = \"\";\r\n                                  // 퍼센트 포맷\r\n                                  // 양수는 빨간색, 음수는 파란색\r\n                                  if(parseFloat(data[column]) >= 0){\r\n                                    classValue = \"plus\"; \r\n                                  }else{\r\n                                    classValue = \"minus\";\r\n                                  }\r\n                                  return <TableCell className={classValue}><NumberFormat value={data[column]} displayType={'text'} thousandSeparator={true} suffix={'%'} /></TableCell>\r\n                                }else if(this.state.columnType[\"naverLink\"].indexOf(column) > -1 ){\r\n                                  // 네이버 링크\r\n                                  return <TableCell><a href={\"https://finance.naver.com/item/main.nhn?code=\" + data[column]} target=\"_blank\">{data[column]}</a></TableCell>\r\n                                }else{\r\n                                  //그 외 일반 필드\r\n                                  return <TableCell>{data[column]}</TableCell>\r\n                                }\r\n                              }\r\n                            })}\r\n                          </TableRow>\r\n                        )\r\n                      })}\r\n                      {/* 추가 */}\r\n                      <TableRow>\r\n                        {this.state.insertMode?\r\n                        this.state.columns[window.location.pathname].map((column, idx) => {\r\n                          if(column == \"EDIT\"){\r\n                            return (\r\n                              // 취소 버튼\r\n                              <TableCell>\r\n                                <IconButton color=\"secondary\" id={idx} name={\"cancel\"+idx} onClick={this.onClickCancel.bind(this)}>\r\n                                  <CancelIcon/>\r\n                                </IconButton>\r\n                              </TableCell>\r\n                              );\r\n                          }else{\r\n                            return (\r\n                              // 추가 버튼\r\n                              <TableCell>\r\n                                <TextField id=\"standard-secondary\" name={column} label={column} color=\"secondary\" onChange={this.onInsertChangeHandler.bind(this)}/>\r\n                              </TableCell>\r\n                            );\r\n                          }\r\n                        })\r\n                        :null}\r\n                      </TableRow>\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n        );\r\n      }\r\n    }\r\n\r\n}\r\n\r\nexport default ContentTable;","import React, {Component} from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport './TransitionsModal.css';\r\n\r\nclass TransitionsModal extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            open : false,\r\n            setOpen : false\r\n        }\r\n    }\r\n    \r\n    componentWillReceiveProps(){\r\n        console.log(\"componentWillReceiveProps\")\r\n        if(this.props.showModal){\r\n            this.handleOpen();\r\n        }\r\n    }\r\n    \r\n    handleOpen(){\r\n        this.setState({\r\n            open : true,\r\n            setOpen : true\r\n        });\r\n    };\r\n    \r\n    handleClose(){\r\n        this.setState({\r\n            open : false,\r\n            setOpen : false\r\n        });\r\n    };\r\n\r\n    render(){\r\n        return (\r\n        <div>\r\n            <Modal\r\n            aria-labelledby=\"transition-modal-title\"\r\n            aria-describedby=\"transition-modal-description\"\r\n            className=\"modal\"\r\n            open={this.state.open}\r\n            onClose={this.handleClose.bind(this)}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n                timeout: 500,\r\n            }}\r\n            >\r\n            <Fade in={this.state.open}>\r\n                <div className=\"paper\">\r\n                <h2 id=\"transition-modal-title\">Transition modal</h2>\r\n                <p id=\"transition-modal-description\">react-transition-group animates me.</p>\r\n                </div>\r\n            </Fade>\r\n            </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TransitionsModal;","import React, { Component } from 'react';\nimport { Header, SideMenu, ContentWrapper } from './components';\n\n\nclass App extends Component{\n  render(){\n    return (\n      <div>\n        {/* <Router basename={process.env.PUBLIC_URL}> */}\n          {/* <Header></Header> */}\n          <SideMenu></SideMenu>\n          <ContentWrapper></ContentWrapper>\n        {/* </Router> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}